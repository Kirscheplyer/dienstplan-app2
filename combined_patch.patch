--- a/src/DienstplanApp.jsx
+++ b/src/DienstplanApp.jsx
@@
-import React, { useState } from 'react';
-import './DienstplanApp.css'; // Stylesheet für Kalenderansicht mit Farben und Interaktivität
+import React, { useState } from 'react';
+import './DienstplanApp.css'; // Stylesheet für Kalenderansicht mit Farben und Interaktivität
@@
-const zfas = ["PC", "AM", "SA"];
+const zfas = ["PAM", "Andre", "Susanne"];
@@
-const plan = [
-  { tag: "Montag",    frueh: "PAM",     spaet: "Andre",   springer: "Susanne" },
-  { tag: "Dienstag",  frueh: "Andre",   spaet: "Susanne", springer: "PAM" },
-  { tag: "Mittwoch",  frueh: "Susanne", spaet: "PAM",     springer: "Andre" },
-  { tag: "Donnerstag",frueh: "PAM",     spaet: "Andre",   springer: "Susanne" },
-  { tag: "Freitag",   frueh: "Andre",   spaet: "Susanne", springer: "PAM" },
-];
+const plan = [
+  { tag: "Montag",    frueh: "PAM",     spaet: "Andre",   springer: "Susanne" },
+  { tag: "Dienstag",  frueh: "Andre",   spaet: "Susanne", springer: "PAM" },
+  { tag: "Mittwoch",  frueh: "Susanne", spaet: "PAM",     springer: "Andre" },
+  { tag: "Donnerstag",frueh: "PAM",     spaet: "Andre",   springer: "Susanne" },
+  { tag: "Freitag",   frueh: "Andre",   spaet: "Susanne", springer: "PAM" },
+];
@@
-function CalendarView({ plan }) {
-  const shifts = ['frueh', 'spaet', 'springer'];
+function CalendarView({ plan }) {
+  const shifts = ['frueh', 'spaet', 'springer'];
+  const [selected, setSelected] = useState({});
+
+  // Toggle-Auswahl einer Zelle
+  const toggleCell = (dayIdx, shift) => {
+    const key = `${dayIdx}-${shift}`;
+    setSelected(prev => ({ ...prev, [key]: !prev[key] }));
+  };
@@
-  return (
-    <table className="calendar">
+  return (
+    <table className="calendar">
@@
-        <tbody>
-        {plan.map((row, dayIdx) => (
-          <tr key={dayIdx}>
-            <td>{row.tag}</td>
-            {shifts.map(shift => {
-              const value = row[shift];
-              const key = `${dayIdx}-${shift}`;
-              return (
-                <td
-                  key={shift}
-                  className={`shift-${shift} ${selected[key] ? 'selected' : ''}`}
-                  onClick={() => toggleCell(dayIdx, shift)}
-                >
-                  {value}
-                </td>
-              );
-            })}
-          </tr>
-        ))}
-      </tbody>
+        <tbody>
+        {plan.map((row, dayIdx) => (
+          <tr key={dayIdx}>
+            <td>{row.tag}</td>
+            {shifts.map(shift => {
+              const value = row[shift];
+              const key = `${dayIdx}-${shift}`;
+              return (
+                <td
+                  key={shift}
+                  className={`shift-${shift} ${selected[key] ? 'selected' : ''}`}
+                  onClick={() => toggleCell(dayIdx, shift)}
+                >
+                  {value}
+                </td>
+              );
+            })}
+          </tr>
+        ))}
+      </tbody>
@@
-export default function DienstplanApp() {
-  return (
-    <div className="dienstplan">
-      <h1>Wochenplan Kalender</h1>
-      <CalendarView plan={plan} />
-    </div>
-  );
-}
+export default function DienstplanApp() {
+  return (
+    <div className="dienstplan">
+      <h1>Wochenplan Kalender</h1>
+      <CalendarView plan={plan} />
+    </div>
+  );
+}
@@
--- a/src/DienstplanApp.css
++++ b/src/DienstplanApp.css
+@@
+.calendar { width: 100%; border-collapse: collapse; }
+.calendar th, .calendar td { border: 1px solid #ccc; padding: 8px; text-align: center; cursor: pointer; }
+.calendar th { background: #f5f5f5; }
+
+/* Farbgebung für Schichten */
+.shift-frueh { background-color: #d4f8d4; }
+.shift-spaet { background-color: #d4e4f8; }
+.shift-springer { background-color: #f8f4d4; }
+
+/* Interaktive Markierung */
+.selected { outline: 3px solid #ff9800; }
@@
--- a/src/pages/Admin.jsx
+++ b/src/pages/Admin.jsx
@@
-import React from 'react';
+import React, { useState } from 'react';
@@
-const zfas = [
-  { name: "PAM",    rolle: "ZFA" },
-  { name: "Andre",  rolle: "ZFA" },
-  { name: "Susanne",rolle: "ZFA" },
+const zfas = [
+  { name: "PAM",    rolle: "ZFA" },
+  { name: "Andre",  rolle: "ZFA" },
+  { name: "Susanne",rolle: "ZFA" },
 ];
@@
-export default Admin;
+// Admin-Komponente mit Möglichkeit, neue Mitarbeiter hinzuzufügen und deren Stundenpläne zu erfassen
+const Admin = () => {
+  const [employees, setEmployees] = useState(zfas);
+  const [showForm, setShowForm] = useState(false);
+  const [newEmp, setNewEmp] = useState({ name: '', rolle: 'ZFA', schedule: [] });
+  const [weekday, setWeekday] = useState('Montag');
+  const [hours, setHours] = useState('');
+
+  // Fügt eine neue Stundenangabe zum neuen Mitarbeiter hinzu
+  const addScheduleEntry = () => {
+    if (!hours) return;
+    setNewEmp({
+      ...newEmp,
+      schedule: [...newEmp.schedule, { tag: weekday, stunden: Number(hours) }]
+    });
+    setHours('');
+  };
+
+  // Speichert den neuen Mitarbeiter in die Liste
+  const addEmployee = () => {
+    setEmployees([...employees, newEmp]);
+    setNewEmp({ name: '', rolle: 'ZFA', schedule: [] });
+    setShowForm(false);
+  };
+
+  return (
+    <div className="admin">
+      <button onClick={() => setShowForm(true)}>Mitarbeiter hinzufügen</button>
+      {showForm && (
+        <div className="add-form">
+          <input type="text" placeholder="Name" value={newEmp.name} onChange={e => setNewEmp({ ...newEmp, name: e.target.value })} />
+          <select value={newEmp.rolle} onChange={e => setNewEmp({ ...newEmp, rolle: e.target.value })}>
+            <option value="ZFA">ZFA</option>
+            <option value="Azubi">Azubi</option>
+          </select>
+          <div className="schedule-input">
+            <select value={weekday} onChange={e => setWeekday(e.target.value)}>
+              <option>Montag</option>
+              <option>Dienstag</option>
+              <option>Mittwoch</option>
+              <option>Donnerstag</option>
+              <option>Freitag</option>
+            </select>
+            <input type="number" placeholder="Stunden" value={hours} onChange={e => setHours(e.target.value)} />
+            <button onClick={addScheduleEntry}>Zu Plan hinzufügen</button>
+          </div>
+          <button onClick={addEmployee}>Speichern</button>
+          <button onClick={() => setShowForm(false)}>Abbrechen</button>
+        </div>
+      )}
+      <ul>
+        {employees.map((emp, idx) => (
+          <li key={idx}>{emp.name} ({emp.rolle}) - {emp.schedule.map((s, i) => `${s.tag}: ${s.stunden}h`).join(', ')}</li>
+        ))}
+      </ul>
+    </div>
+  );
+};
+
+export default Admin;
